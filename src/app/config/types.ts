const TYPES = {
  // controllers
  AuthController: Symbol('AuthController'),
  AgreementController: Symbol('AgreementController'),
  UserController: Symbol('UserController'),
  BaseController: Symbol('BaseController'),
  LabelController: Symbol('LabelController'),
  HealthController: Symbol('HealthController'),
  PatientController: Symbol('PatientController'),
  ConsentController: Symbol('ConsentController'),
  LanguageController: Symbol('LanguageController'),
  ComponentController: Symbol('ComponentController'),
  FhirServerController: Symbol('FhirServerController'),
  LafiaMediaController: Symbol('LafiaMediaController'),
  CodeSystemController: Symbol('CodeSystemController'),
  LafiaVideoController: Symbol('LafiaVideoController'),
  PractitionerController: Symbol('PractitionerController'),
  FhirResourceController: Symbol('FhirResourceController'),
  ImplementationGuideController: Symbol('ImplementationGuideController'),
  ValueSetController: Symbol('ValueSetController'),

  // service
  S3Service: Symbol('S3Service'),
  KafkaSetup: Symbol('KafkaSetup'),
  RedisStore: Symbol('RedisStore'),
  UserService: Symbol('UserService'),
  AuthService: Symbol('AuthService'),
  AgreementService: Symbol('AgreementService'),
  FileService: Symbol('FileService'),
  EmailService: Symbol('EmailService'),
  KafkaService: Symbol('KafkaService'),
  RabbitMqSetup: Symbol('RabbitMqSetup'),
  TwilioService: Symbol('TwilioService'),
  PatientService: Symbol('PatientService'),
  UtilityService: Symbol('UtilityService'),
  LanguageService: Symbol('LanguageService'),
  RabbitMqService: Symbol('RabbitMqService'),
  FirebaseService: Symbol('FirebaseService'),
  ConnectionService: Symbol('ConnectionService'),
  FhirServerService: Symbol('FhirServerService'),
  CodeSystemService: Symbol('CodeSystemService'),
  LafiaMediaService: Symbol('LafiaMediaService'),
  TwilioRoomService: Symbol('TwilioRoomService'),
  VideoRecordService: Symbol('VideoRecordService'),
  FhirResourceService: Symbol('FhirResourceService'),
  PractitionerService: Symbol('PractitionerService'),
  VideoBroadcastService: Symbol('VideoBroadcastService'),
  SignallingServerService: Symbol('SignallingServerService'),
  ImplementationGuideService: Symbol('ImplementationGuideService'),
  EncounterService: Symbol('EncounterService'),
  ClaimService: Symbol('ClaimService'),
  AppointmentService: Symbol('AppointmentService'),
  AppointmentResponseService: Symbol('AppointmentResponseService'),
  CareTeamService: Symbol('CareTeamService'),
  OrganizationService: Symbol('OrganizationService'),
  ValueSetService: Symbol('ValueSetService'),
  ValueSetConceptService: Symbol('ValueSetConceptService'),

  // repositories
  BaseRepository: Symbol('BaseRepository'),
  UserRepository: Symbol('UserRepository'),
  LabelRepository: Symbol('LabelRepository'),
  PatientRepository: Symbol('PatientRepository'),
  LanguageRepository: Symbol('LanguageRepository'),
  ComponentRepository: Symbol('ComponentRepository'),
  TwilioRoomRepository: Symbol('TwilioRoomRepository'),
  ConnectionRepository: Symbol('ConnectionRepository'),
  CodeSystemRepository: Symbol('CodeSystemRepository'),
  VideoRecordRepository: Symbol('VideoRecordRepository'),
  PractitionerRepository: Symbol('PractitionerRepository'),
  FhirResourceRepository: Symbol('FhirResourceRepository'),
  VideoBroadcastRepository: Symbol('VideoBroadcastRepository'),
  ImplementationGuideRepository: Symbol('ImplementationGuideRepository'),
  PractitionerVideoBroadcastRepository: Symbol('PractitionerVideoBroadcastRepository'),
  EncounterRepository: Symbol('EncounterRepository'),
  ClaimRepository: Symbol('ClaimRepository'),
  AppointmentRepository: Symbol('AppointmentRepository'),
  AppointmentResponseRepository: Symbol('AppointmentResponseRepository'),
  CareTeamRepository: Symbol('CareTeamRepository'),
  OrganizationRepository: Symbol('OrganizationRepository'),
  ValueSetRepository: Symbol('ValueSetRepository'),
  ValueSetConceptRepository: Symbol('ValueSetConceptRepository'),
  AgreementRepository: Symbol('AgreementRepository'),

  // models
  ModelClass: Symbol('ModelClass'),

  // middlewares
  AuthMiddleware: Symbol('AuthMiddleware'),
  // Utils
  TokenUtil: Symbol('TokenUtil'),
  CsvImporter: Symbol('CsvImporter'),
  FhirImporter: Symbol('FhirImporter'),

  // Server
  App: Symbol('App'),
};

export default TYPES;

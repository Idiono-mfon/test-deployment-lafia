<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
    <file path="/Users/ps2020-01/Documents/GitHub/ParallelScore/lafia-service/src/tests/__tests__/integrationTests/patientController.spec.ts">
        <testCase
                name="User Service Unit Test Patient [Controller] Integration Test Patient Controller should be defined"
                duration="6"/>
        <testCase
                name="User Service Unit Test Patient [Controller] Integration Test PUT /patients/:id should update patient data"
                duration="109"/>
        <testCase
                name="User Service Unit Test Patient [Controller] Integration Test PUT /patients/:id should throw error if the resourceType is missing"
                duration="69"/>
        <testCase
                name="User Service Unit Test Patient [Controller] Integration Test GET /patients/:id should get patient data by ID"
                duration="43"/>
        <testCase
                name="User Service Unit Test Patient [Controller] Integration Test GET /patients/:id should throw error if the patient does not exist"
                duration="67"/>
        <testCase
                name="User Service Unit Test Patient [Controller] Integration Test POST /patients should create new patient"
                duration="188"/>
        <testCase
                name="User Service Unit Test Patient [Controller] Integration Test POST /patients should not create patient if email is missing"
                duration="52"/>
        <testCase
                name="User Service Unit Test Patient [Controller] Integration Test POST /patients should throw error if user email already exist"
                duration="48"/>
        <testCase
                name="User Service Unit Test Patient [Controller] Integration Test POST /patients should throw error if user phone already exist"
                duration="50"/>
        <testCase
                name="User Service Unit Test Patient [Controller] Integration Test POST /patients/:id/attachments should upload patient [image] attachment"
                duration="1930"/>
        <testCase
                name="User Service Unit Test Patient [Controller] Integration Test POST /patients/:id/attachments should fail if the user is not authenticated"
                duration="68"/>
        <testCase
                name="User Service Unit Test Patient [Controller] Integration Test POST /patients/:id/attachments should fail if the user is not found"
                duration="73"/>
        <testCase
                name="User Service Unit Test Patient [Controller] Integration Test POST /patients/:id/broadcast/videos should get patient broadcasts"
                duration="54"/>
        <testCase
                name="User Service Unit Test Patient [Controller] Integration Test POST /patients/:id/broadcast/videos should fail if the user is not found"
                duration="53"/>
    </file>
    <file path="/Users/ps2020-01/Documents/GitHub/ParallelScore/lafia-service/src/tests/__tests__/integrationTests/userController.spec.ts">
        <testCase
                name="User [Controller] Integration Test POST /users/register when the data is correct should create a new user"
                duration="79"/>
        <testCase
                name="User [Controller] Integration Test POST /users/register when the email address is invalid should throw an error - Email is not valid"
                duration="73"/>
        <testCase
                name="User [Controller] Integration Test POST /users/register when the password is less than 6 characters should throw an error with a message for acceptable password patterns"
                duration="57"/>
        <testCase
                name="User [Controller] Integration Test POST /users/register when there is no upper case letter in the password should throw an error with a message for acceptable password patterns"
                duration="53"/>
        <testCase
                name="User [Controller] Integration Test POST /users/register when the password contains no integer should throw an error with a message for acceptable password patterns"
                duration="55"/>
        <testCase
                name="User [Controller] Integration Test POST /users/register when there is no special character in the password should throw an error with a message for acceptable password patterns"
                duration="62"/>
        <testCase
                name="User [Controller] Integration Test POST /users/validate when there is an existing user with the same email should throw an error - a user with this email already exist"
                duration="40"/>
        <testCase
                name="User [Controller] Integration Test POST /users/validate when there is an existing user with the same phone number should throw an error - a user with this phone already exist"
                duration="42"/>
        <testCase
                name="User [Controller] Integration Test POST /users/validate when all the validation pass should send OTP to the phone number of the user"
                duration="36"/>
        <testCase
                name="User [Controller] Integration Test GET /users/photo should throw an error if the user is not authenticated"
                duration="61"/>
        <testCase name="User [Controller] Integration Test GET /users/photo should return photo" duration="64"/>
        <testCase
                name="User [Controller] Integration Test POST /users/update should throw an error if the user is not authenticated"
                duration="43"/>
        <testCase name="User [Controller] Integration Test POST /users/update should update user data" duration="61"/>
        <testCase
                name="User [Controller] Integration Test PUT /users/:id/change-password should throw an error if the user does not exist"
                duration="39"/>
        <testCase
                name="User [Controller] Integration Test PUT /users/:id/change-password should throw an error if the user old password does not match"
                duration="45"/>
        <testCase
                name="User [Controller] Integration Test PUT /users/:id/change-password should throw an error if the user new password fails validation"
                duration="43"/>
        <testCase
                name="User [Controller] Integration Test PUT /users/:id/change-password should update user password if all the validation checks are passed"
                duration="44"/>
        <testCase name="User [Controller] Integration Test POST /users/reset-password should provide email address"
                  duration="45"/>
        <testCase
                name="User [Controller] Integration Test POST /users/reset-password should throw an error if the user does not exist"
                duration="41"/>
        <testCase name="User [Controller] Integration Test POST /users/reset-password should reset user password"
                  duration="44"/>
        <testCase name="User [Controller] Integration Test POST /users/check should pass user check" duration="33"/>
        <testCase
                name="User [Controller] Integration Test POST /users/otp/send should send OTP to the user&apos;s phone"
                duration="33"/>
        <testCase name="User [Controller] Integration Test POST /users/otp/verify should verify user&apos;s OTP"
                  duration="30"/>
        <testCase
                name="User [Controller] Integration Test POST /users/otp/verify should fail OTP verification if the code is not correct"
                duration="31"/>
        <testCase
                name="User [Controller] Integration Test POST /users/otp/verify should fail OTP verification if the provided phone is not found"
                duration="30"/>
        <testCase
                name="User [Controller] Integration Test POST /users/existing should throw error if the user already exist"
                duration="42"/>
        <testCase name="User [Controller] Integration Test POST /users/existing should not find existing user "
                  duration="37"/>
        <testCase
                name="User [Controller] Integration Test POST /users/access/generate should generate a new twilio token"
                duration="27"/>
    </file>
    <file path="/Users/ps2020-01/Documents/GitHub/ParallelScore/lafia-service/src/tests/__tests__/integrationTests/codeSystemController.spec.ts">
        <testCase
                name="CodeSystem [Controller] Integration Test POST /systems when passed in correct data should create a new code system"
                duration="48"/>
        <testCase
                name="CodeSystem [Controller] Integration Test GET /systems/marital_status when there is data with type of marital_status should return code systems with type marital_status"
                duration="40"/>
        <testCase name="CodeSystem [Controller] Integration Test GET /systems/languages" duration="40"/>
        <testCase name="CodeSystem [Controller] Integration Test GET /systems/relationships" duration="40"/>
        <testCase name="CodeSystem [Controller] Integration Test GET /systems/qualifications" duration="38"/>
        <testCase name="CodeSystem [Controller] Integration Test GET /systems/durations" duration="41"/>
    </file>
    <file path="/Users/ps2020-01/Documents/GitHub/ParallelScore/lafia-service/src/tests/__tests__/unitTests/users/userService.spec.ts">
        <testCase name="User Service Unit Test should be defined" duration="5"/>
        <testCase name="User Service Unit Test should create a new user" duration="42"/>
        <testCase name="User Service Unit Test should not create a new user if email is invalid" duration="9"/>
        <testCase name="User Service Unit Test should not create a user if password is less than 6 characters"
                  duration="25"/>
        <testCase name="User Service Unit Test should validate a user " duration="6"/>
        <testCase name="User Service Unit Test should fail validation if user email already exists " duration="12"/>
        <testCase name="User Service Unit Test should fail validation if user phone already exists " duration="26"/>
        <testCase name="User Service Unit Test should get one user" duration="5"/>
        <testCase name="User Service Unit Test should login a user with email" duration="10"/>
        <testCase name="User Service Unit Test should login a user with phone" duration="9"/>
        <testCase name="User Service Unit Test should not login with invalid email" duration="5"/>
        <testCase name="User Service Unit Test should not login with invalid phone" duration="7"/>
        <testCase name="User Service Unit Test should not login with invalid password" duration="26"/>
        <testCase name="User Service Unit Test should log a user out" duration="6"/>
        <testCase name="User Service Unit Test should generate JWT token" duration="7"/>
        <testCase name="User Service Unit Test should throw error generating JWT token if id is not provided"
                  duration="8"/>
        <testCase name="User Service Unit Test should decode JWT token" duration="6"/>
        <testCase name="User Service Unit Test should throw error while decoding JWT token" duration="7"/>
        <testCase name="User Service Unit Test should update user password" duration="17"/>
        <testCase name="User Service Unit Test should not update user password if old password is incorrect"
                  duration="12"/>
        <testCase name="User Service Unit Test should not update user password if password validation fails"
                  duration="10"/>
        <testCase name="User Service Unit Test should not update user password if the user does not exist"
                  duration="6"/>
        <testCase name="User Service Unit Test should not reset user password if an email is not provided"
                  duration="7"/>
        <testCase name="User Service Unit Test should not reset user password if a user with the email does not exist"
                  duration="5"/>
        <testCase
                name="User Service Unit Test should reset user password if an email is provided and a user with the email exist"
                duration="12"/>
        <testCase name="User Service Unit Test should update user" duration="10"/>
        <testCase name="User Service Unit Test should check for existing user and throw error if the user already exist"
                  duration="6"/>
        <testCase
                name="User Service Unit Test should check for existing user and not throw error if the user does not exist already"
                duration="5"/>
    </file>
    <file path="/Users/ps2020-01/Documents/GitHub/ParallelScore/lafia-service/src/tests/__tests__/unitTests/codeSystems/codeSystemModel.spec.ts">
        <testCase name="User Model Unit Test should be defined" duration="1"/>
        <testCase name="User Model Unit Test should be a BaseModel" duration="1"/>
        <testCase name="User Model Unit Test should be a Model" duration="0"/>
        <testCase name="User Model Unit Test should have a tableName" duration="4"/>
        <testCase name="User Model Unit Test should return hidden fields" duration="2"/>
        <testCase name="User Model Unit Test should have a jsonSchema" duration="1"/>
    </file>
    <file path="/Users/ps2020-01/Documents/GitHub/ParallelScore/lafia-service/src/tests/__tests__/unitTests/users/userModel.spec.ts">
        <testCase name="User Model Unit Test should be defined" duration="1"/>
        <testCase name="User Model Unit Test should be a BaseModel" duration="1"/>
        <testCase name="User Model Unit Test should be a Model" duration="1"/>
        <testCase name="User Model Unit Test should have a tableName" duration="0"/>
        <testCase name="User Model Unit Test should have a jsonSchema" duration="1"/>
    </file>
    <file path="/Users/ps2020-01/Documents/GitHub/ParallelScore/lafia-service/src/tests/__tests__/unitTests/codeSystems/codeSystemService.spec.ts">
        <testCase name="Code System Service Unit Test should be defined" duration="2"/>
        <testCase name="Code System Service Unit Test should get code system by type" duration="7"/>
        <testCase name="Code System Service Unit Test should get code system by code system name" duration="6"/>
        <testCase name="Code System Service Unit Test should add new code system" duration="6"/>
    </file>
</testExecutions>
